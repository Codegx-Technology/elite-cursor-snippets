{
  "=== CORE AI PROMPTS ===": {
    "prefix": "ai",
    "body": [
      "// üß† Core AI Prompts - Choose one:",
      "// thinkwithai - Strategic reasoning partner",
      "// surgicalfix - Precision bug fixes", 
      "// refactorintent - Clean refactoring",
      "// writetest - Unit test generation",
      "// doccode - Kenya-first documentation",
      "// unstuck - Cursor rerouting",
      "// augmentsearch - Semantic search",
      "// kenyafirst - Kenyan tone/brand",
      "// mindreset - State clearing"
    ],
    "description": "Show all core AI prompt options"
  },
  "Think with AI": {
    "prefix": "thinkwithai",
    "body": [
      "// ü§ñ THINKING WITH AI",
      "// Context: ${1:Describe what you're working on}",
      "// Goal: ${2:What do you want to achieve?}",
      "// Constraints: ${3:Any limitations or requirements?}",
      "",
      "Please analyze this situation and provide strategic guidance:"
    ],
    "description": "Invoke AI thinking mode for strategic reasoning"
  },
  "Surgical Fix": {
    "prefix": "surgicalfix", 
    "body": [
      "// üîß SURGICAL FIX MODE",
      "// Issue: ${1:Describe the bug or problem}",
      "// Expected: ${2:What should happen?}",
      "// Actual: ${3:What's happening instead?}",
      "",
      "Please provide a precise, surgical fix:"
    ],
    "description": "Fix logic surgically with precision"
  },
  "Refactor Intent": {
    "prefix": "refactorintent",
    "body": [
      "// üîÑ REFACTOR WITH INTENT",
      "// Target: ${1:Code to refactor}",
      "// Intent: ${2:Why refactor? Performance, readability, maintainability?}",
      "// Constraints: ${3:Keep existing API, avoid breaking changes?}",
      "",
      "Please refactor this code with clear intent:"
    ],
    "description": "Intentional refactoring with clear purpose"
  },
  "Refactor Clean": {
    "prefix": "refactorclean",
    "body": [
      "// üîÑ REFACTOR CLEAN",
      "// Target: ${1:Code to refactor}",
      "// Goal: ${2:Improve readability, performance, maintainability?}",
      "// Constraints: ${3:Keep existing API, avoid breaking changes?}",
      "",
      "Please refactor this code following clean code principles:"
    ],
    "description": "AI-powered code refactoring"
  },
  "Auto Component": {
    "prefix": "autocomp",
    "body": [
      "// ‚öõÔ∏è AUTO-OPTIMIZE COMPONENT",
      "// Component: ${1:Component to optimize}",
      "// Issues: ${2:Performance, hooks, accessibility?}",
      "// Target: ${3:React best practices, performance?}",
      "",
      "Please auto-optimize this React component:"
    ],
    "description": "Auto-optimize React components"
  },
  "Write Test": {
    "prefix": "writetest",
    "body": [
      "// üß™ WRITE TEST",
      "// Function: ${1:Function to test}",
      "// Framework: ${2:Jest, Mocha, etc?}",
      "// Coverage: ${3:Unit, integration, edge cases?}",
      "",
      "Please generate comprehensive tests:"
    ],
    "description": "Generate unit tests with AI"
  },
  "Doc Code": {
    "prefix": "doccode",
    "body": [
      "// üìù DOCUMENT CODE",
      "// Component: ${1:Component/function to document}",
      "// Style: ${2:JSDoc, README, inline comments?}",
      "// Audience: ${3:Developers, users, Kenya-first?}",
      "",
      "Please document this code with Kenya-first principles:"
    ],
    "description": "Kenya-first documentation generation"
  },
  "Unstuck": {
    "prefix": "unstuck",
    "body": [
      "// üöÄ UNSTUCK MODE",
      "// Problem: ${1:What's blocking you?}",
      "// Attempted: ${2:What have you tried?}",
      "// Environment: ${3:Tech stack, context?}",
      "",
      "Please help me get unstuck:"
    ],
    "description": "Cursor rerouting when stuck"
  },
  "Augment Search": {
    "prefix": "augmentsearch",
    "body": [
      "// üîç AUGMENT SEARCH",
      "// Query: ${1:What are you looking for?}",
      "// Context: ${2:File, component, feature?}",
      "// Scope: ${3:Codebase, specific files, patterns?}",
      "",
      "Please search and analyze:"
    ],
    "description": "Semantic search with AI augmentation"
  },
  "Kenya First": {
    "prefix": "kenyafirst",
    "body": [
      "// üá∞üá™ KENYA FIRST",
      "// Feature: ${1:Feature to localize}",
      "// Context: ${2:Currency, language, culture?}",
      "// Requirements: ${3:Specific Kenya requirements?}",
      "",
      "Please adapt this for Kenya-first principles:"
    ],
    "description": "Kenyan tone and brand adaptation"
  },
  "Kenya Check": {
    "prefix": "kenyacheck",
    "body": [
      "// üá∞üá™ KENYA CHECK",
      "// Element: ${1:Currency, phone, date, address?}",
      "// Current: ${2:Current format}",
      "// Required: ${3:KSh, +254, EAT timezone?}",
      "",
      "Please validate and fix Kenya-specific formatting:"
    ],
    "description": "Kenya-specific requirements validation"
  },
  "Mind Reset": {
    "prefix": "mindreset",
    "body": [
      "// üßπ MIND RESET",
      "// Current State: ${1:What's in your mind?}",
      "// Goal: ${2:What do you want to focus on?}",
      "// Clear: ${3:What should be cleared?}",
      "",
      "Please help me reset and refocus:"
    ],
    "description": "State clearing and refocusing"
  },
  "Guard On": {
    "prefix": "guardon",
    "body": [
      "// üõ°Ô∏è GUARDRAILS ACTIVATED",
      "// Focus: ${1:What area to guard?}",
      "// Standards: ${2:Quality, security, performance?}",
      "// Checks: ${3:Specific checks needed?}",
      "",
      "Activating guardrails for:"
    ],
    "description": "Activate quality guardrails"
  },
  "SRP Check": {
    "prefix": "srpcheck",
    "body": [
      "// üéØ SINGLE RESPONSIBILITY CHECK",
      "// Function: ${1:Function to check}",
      "// Responsibilities: ${2:What does it do?}",
      "// Issues: ${3:Multiple responsibilities?}",
      "",
      "Please validate Single Responsibility Principle:"
    ],
    "description": "Single Responsibility Principle validation"
  },
  "Hook Check": {
    "prefix": "hookcheck",
    "body": [
      "// ‚öõÔ∏è REACT HOOKS CHECK",
      "// Component: ${1:Component to check}",
      "// Hooks: ${2:Which hooks are used?}",
      "// Issues: ${3:Rules violations, dependencies?}",
      "",
      "Please validate React hooks best practices:"
    ],
    "description": "React hooks best practices validation"
  },
  "Error Check": {
    "prefix": "errorcheck",
    "body": [
      "// üö® ERROR HANDLING CHECK",
      "// Function: ${1:Function to check}",
      "// Errors: ${2:What errors can occur?}",
      "// Handling: ${3:How are errors handled?}",
      "",
      "Please validate error handling:"
    ],
    "description": "Error handling validation"
  },
  "Security Check": {
    "prefix": "securitycheck",
    "body": [
      "// üõ°Ô∏è SECURITY CHECK",
      "// Code: ${1:Code to check}",
      "// Vulnerabilities: ${2:XSS, injection, auth?}",
      "// Context: ${3:User input, API, database?}",
      "",
      "Please validate security and identify vulnerabilities:"
    ],
    "description": "Security vulnerability detection"
  },
  "Performance Check": {
    "prefix": "perfcheck",
    "body": [
      "// ‚ö° PERFORMANCE CHECK",
      "// Code: ${1:Code to optimize}",
      "// Issues: ${2:Slow loops, memory leaks, re-renders?}",
      "// Target: ${3:Speed, memory, bundle size?}",
      "",
      "Please analyze and optimize performance:"
    ],
    "description": "Performance optimization analysis"
  },
  "Accessibility Check": {
    "prefix": "a11ycheck",
    "body": [
      "// ‚ôø ACCESSIBILITY CHECK",
      "// Component: ${1:Component to check}",
      "// Issues: ${2:Screen readers, keyboard nav, colors?}",
      "// Standards: ${3:WCAG 2.1 AA compliance?}",
      "",
      "Please validate accessibility standards:"
    ],
    "description": "Accessibility standards validation"
  },
  "Mobile Check": {
    "prefix": "mobilecheck",
    "body": [
      "// üì± MOBILE CHECK",
      "// Component: ${1:Component to check}",
      "// Issues: ${2:Touch targets, responsive, performance?}",
      "// Devices: ${3:Phone, tablet, specific sizes?}",
      "",
      "Please validate mobile-first design:"
    ],
    "description": "Mobile-first design validation"
  },
  "No Console Log": {
    "prefix": "noconlog",
    "body": [
      "// üßπ REMOVE CONSOLE LOGS",
      "// File: ${1:File to clean}",
      "// Keep: ${2:Keep error logs, debug info?}",
      "// Replace: ${3:Replace with proper logging?}",
      "",
      "Please remove console.log statements:"
    ],
    "description": "Remove console.log statements"
  }
}
